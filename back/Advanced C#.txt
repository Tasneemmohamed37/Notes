
--------------------------------- [ Day 1 ] --------------------
- out keyword => use to pass value by ref & compiler will not reject if not initialize it 

----------------------------- [ Day 2 ] -------------------

- Enum "enumuration" => list of const vars [ int - long - shourt ]
					 => value type
					 => can 'or' enum values like colors ex , but must curfull when assigine values ,refer to use '2, 4, 8, 16, 32....' 

- Stack include => local vars and parameters
				
- Heap include => objs with all vars inside it


----------------------------- [ Day 3 ] ------------------

- sealed class => cant inherite from it , so cant use virtual functions inside it 

- sealed override functions => breack override serise بمعني محدش بعدي يعمل اوفرريد

- object class functions => toString => get namespace.class_name 
						 => Equals
						 => getType -> used in reflection "in run time has obj want to know info about it"
						 => getHashCode -> code generate based on obj data used specefic algo
						 
						 
- Array => always ref type 
		=> 2D arr.length == 1D.lenth*2D.length
		=> arr.getLength(0) -> 1D.length == rows 
		=> jagged array -> array of arrayes
		=> once created never change size 
		
- string => is ref type but when passing it to function as a parameter , after execute function , it will never change [emutable data type]
		 => but if passing it and add 'ref' keyword before parameter ,  after execute function , it will change by create new obj so refere to use stringBuilder
		 

--------------------------------- [ Day 4 ] --------------------------

- operator overloading -> must be static functions 

- generics => بنأخر تعريف الداتا تايب اللي احنا بنشتغل عليه لغاية ما نستخدم الكلاس 
		   => <T> where T : class 
		   => <T> where T : new () -> if you want to create obj in generic class can use it to make sure that all classes must contain parameter less ctor 
		   
- indexer => special type of prop has square pracetes to pass parameter , and has no name only write 'this' keyword

------------------------------------ [ Day 5 ] ------------------------

- nested class => defind class inside class -> inner class cant access private members of otter class 
											-> but when create obj from otter class inside inner , can access private members

- can`t use forEach with list of user defind data type 'collection from class' -> must implement IEnumrable -> which have function 'get enumrator' return IEnumrator which have 3 func -> current
																																													   -> moveNext
																																													   -> reset

- ICollection => used with countable collections 

------------------------------- [ Day 6 ] ------------------------

- delegete => pointer to function 

- delegete is abstract class so must make your own class and implement it وعشان كمان يكون مجبر يحدد السجنيتشر بتاع الفانكشن اللي هيتعامل معاها
								   1 => delegete bool myDelegete (int num) كدا الكومبيلر عملي كلاس بيورث من دليجيت ودي السجنيتشر بتاعه 
								   2 => display(list<int> mylist , myDelegete del) كدا الفانكشن دسبلاي مستنيه اي فانكشن ملتزمه بنفس سيجنيتشر ماي دلجيت
								   3 => myDelegete oddDel = new delegete(isOdd) || myDelegete oddDel = isOdd كدا عملنا اوبجكت من ماي ديلجيت ودا هيكون بوينتر لفانكشن اوود
										step 3 is optional , if you not make it compiler will make obj from myDelegete and ref it to passed function in step 4
								   4 => display(list , oddDel)
								   
- obj from delegete have => method -> function name
						 => target -> obj from delegete

- can use with delegete annonumase function , then compiler will generate annonumase class 'nested class' have this function with random name 

- also can use labmda expression [display(list, n => n%2!=0)]

- predefinde delegetes , can use them instead of create your own delegete => action -> return void
																		  => func -> must return
																		  => predicate -> parameter generic , return bool
																		  
- multicast delegete => allow delegete to pointer to list of functions and invoke all this , and return only last function

---------- [ events ]

- event => action happen in publisher then notify subscriber 

- prob => publisher must contain list of subscribers which will contain deff classes , data type of this list will be ???
- solve => subscribers implement specific interface -> prop : will force subscribers with function signeture and name 
		=> make delegete in publisher class , and make it multicast with all subscribers functions
		
- prob => if there is no subscribers or the delegete equals to null , will get exeption
- solve => make it special type of event by use keyword 'event' before delegete , this will pevent to use any operator with this delegete instead of [+= , -=]  

------------------------------- [ Day 7 ] ------------------------

- prob -> subscriber can use same function with different publishers so want to know sender
- solve -> publisher deleget return obj with sender inf & subscriber cast this obj 

- prob -> if publisher want to expand evend to send more data , all subscribers must edit there functions
- solve -> publisher send data from specific data type 'class EventArgs' so when add new prop ,not cuase prob in subscribers functions 
			كدا القديم شغال عادي ولو انت ك سبسكرايبر حابب يوصلك التعديلات الجديدة ادخل عدل في الكود بتاعك 
			
- EventArgs => كلاس فاضي مفيهوش اي معلومة مفيدة فقط هيوصل للسبسكرايبرز ان الايفينت حصل
