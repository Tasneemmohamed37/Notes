
** eng ahmed mamdoh => https://drive.google.com/drive/folders/1WbY2Doyapd6FJmM1-vU7A-0VutZMluS-

--------------- [ Day 1] ----------------------------

- object is physical representation of class 

- class is logical representation 

- obj1 == obj2 [compare the address of two reference like function equals in class obj , if you want compare valuse use opereator overloading]

- if you want tot create obj from class [abstract || static || private ctor]

----------------------------
principles:

1- encapsulation => related data and functionality in class and 
					hide data form any thing out this class [black box] 
					controll accessability using getter , setter to apply validation

2- inhiretence => "is a relationship" كلاس بيكتسب جميع الصفات والافعال من كلاس تاني
					وبيزود عليها حاجات خاصه بيه خلته نوع جديد مميز

3- polymerphism => [overload , override , pass parameter function or any child of this parameter]

guidelines:

- abstraction => شكل مجرد للاوبجكت بعيد عن اي تفاصيل 
			  => implementationبعمل كلاس بشكل معين لبيزنيز لوجيك معين ولو احتاجت نفس الكلاس ل بيزنيز لوجيك تاني اقدر اغير ال 

---------------------------
Access Modefiers :

	- protected : access only throw child class scope
---------------------------


SOLID principles :

S => single responsipility

O => open for extention , closed for modification 

L => liscov Substitution  --> subTypes must be substitution for base types

I => interface Segregation --> interface should focuse on specific client requirment 

D => dependency inversion --> high level moduls shouldnt depend on low level module , both should depend on abstraction

---------------------------
- can`t create obj from => abstract class
						=> class with private ctor [singleton design pattern??]

--------------- [ Day 2] ----------------------------


- code [instructions || functions ] => load only one time in program in 

- to use local var you must first initialize it "give value to it "

- value type => struct - enum - int - float..

- reference type => class

- $car c = new car()  => car c : create reference  | new car() : create obj in heap 

- stack => function local var "var initialize in function" , function input parameter 

- heap [dynamic alocation] => - 

- New => initialize member vars [value type by defualt value and reference type by null]

- passing parameter by value => parameter value after execute function still the same

- passing parameter by reference => any change occure to this parameter still after execute function 

- to controll member vars during create obj => ctor 
- to controll member vars after create obj => prop || getter , setter

- Properties are class members that encapsulate data and provide a way to read or write the value of that data

- ctor used for => controll obj creation
				=> initialize members
				
--------------- [ Day 3] ----------------------------


- relations => associoation [use - no dependency between objs - shourt time rel - rel start and end inside func , befor and after execute this function two obj has no rel between them]
			=> aggregation [contain - no dependency between objs - obj2 ref access among class - more taller rel - rel throw class by use ref from obj2 no create this]
			=> composition [cosist of - dependency on other obj - long rel - creation obj2 occure inside obj1]
			=> inhiretence [is a - ]
			
- in case of inhiretence CLR generate obj form parent class with reference call "Base"	

- in case of inhiretence cant use ctor chaining

--------------- [ Day 4 ] ----------------------------

- this => hidden input parameter passed to non static functions when call it 

- base => hidden object in child class use to access parent memebers

- in case of hide inhireted members , still can access them using base.member_name but only in child scope

- abstract class => can`t create obj from it [ مقدرش اوصفه زي الانيمال ز الكرياتشر] becouse its not fully implemented class 
				 => can contain abstract and non-abstract methods
				 => 
				 
				 
- abstract methods by defualt vertial => so childs can override and implemented it


---------------------------- [ Day 5 ] ----------------------------

----------- [ static ]

- any static by defualt public

- instance function => فانكشن نتيجتها بتختلف بناء علي الاوبجكت اللي بيعملها كول

- static function => نتيجتها ثابته علي كل الاوبجكتس
					لان في الامبليمنتيشن بتاعها مش بعتمد علي اي ميمبر فاريبال جوا الكلاس اللي هي فيه
				  => must be **public**
				  => static function using class name
				  => work with only static members [becouse there is no keyword this inside it & static load first in memory
													ف لما تنفذها انت مش متاكد انه فيه اوبجكتس اتكريتت في الميموري ولا لسه  ]
				  => can`t be vertial or override it [ لان الاصل في الاوفرريد اني بعمل اوبجكت من الكلاس واشاور عليه بريفيرينس من البيرنت ودا مش متاح هنا] 
				  => can overload it
				  => child class inhirete it 
				  => used in opereator overload [ opereator for user defind classes ]



- static members => حاجه مش ريليتد لكل اوبجكت طالع من الكلاس دا لكن هي معلومه تخص الكلاس نفسه 
				 => ex: count objects created from this class
				 => in memory load only once along application -> load in heap 
				 
				 
-  علي مستوي الميموري بيحصل لود للاستاتيك ميمبرز الاول وبعدها لما نكريت اوبجكت بيحصل لود لل نن استاتيك ميمبرز 
	عشان كدا نقدر من جوا النن ستاتيك نعمل كول لل ستاتيك لانها بنسبه 100% موجودين في الميموري لكن العكس مش بنقدر
	
- opereator overloading -> must (== & !=)(++ & --) [لانه ك لوجيك  الاثنين عكس بعض فمينفعش  واحده فيهم تشتغل علي ريفرينس والثانيه تشتغل علي الداتا اللي في الكلاس دا ] 
						-> can overload implicit - explicite casting [public static implicit opereator complex(int x)]
						
						
------------------------------------------- [ Day 6 ] -----------------------------------------------


-dynamic binding => مش بنعرف الاوبجكت اللي احنا شغالين معاه غير في الرن تايم
				 => ببساطه فانكشن بتاخد باراميتر من كلاس معين والكلاس دا له اولاد ف احنا مش عارفين 
					اللي هينفذ الفانكشن هيبعت البيرنت ولا اي اتشايلد فيهم

-----[class object]

- parent for all classes

- unSave casting solution => cast using keyword 'AS' --> in case cant cast the reference be null so can check it first then complete emplmentation 

- 	نفس فكره اوفررايد ال == و != يفضل نعمل اوفرريد لل
		equals , gethashcode [عباره عن كود بيتعمله جينيريت بناء علي الجوريزم معين ]
		ف لو الفانكشن ايكوالز بتقارن بناء علي ال id 
		نخلي ال جيت هاش كود تشتغل علي ال id only
		
- function equals => compare two references

- function gethashcode => based on specific algorithm generate code for objects 

- function getType => return obj meta data 
				   => used in reflection [object run time reverse engeneering ] [محتاجين نعرف شويه معلومات عن كلاس ابوجكت معين في الرن تايم]
				   
				   
- memberWiseClone => تاخد نسخه طبق الاصل من البيانات حتي البرايقت وتضيفها الي اوبجكت جديد
				  => protected ? 1. security , cant clone any object from class unless you used it inside class 
								 2. singleton
								 3. shalow copy "copy values bu if it was ref type will copy ref " [big prob in case of any relations when copy reference types --> solve by :: after copy give initialize reference types with new values]
								 


------------------------------------------------------- [ Day 7 ] -------------------------------------

- string => hard to validate it

- enum => set of const values [by defualt int , can long || shourt] 
	   => value type
	   => all posible values for specific var , collected in one block
	   => var can concate more than one value from enum using or " | " ==> big prob , not sure concate will generate new number 
																	   ==> solve it , each const in enum must when conver his value to binary must contain only one digit "1"
																	   ==> to check if value contain specific color => use 'and' if new value equal this color then it contain it
																	   ==> when concate refer to use attribute "[flag]" befor enum declaration so when display new values display concated const names
																	   

- struct => value type
		 => store in stack
		 => using 'new keyword + ctor' to initialize struct variables with defualt values 
		 => int x = new int(); ==> this statment used to initialize x using parameterless ctor by defualt value "zero"
		 => must initialize struc befor use if -> complex c = new complex() ياما تعتمد علي الباراميترليس كونستراكتور
											   -> complex c ;  c.real=1 ; c.imagin = 1 ; ياما تعمل انشياليز بايدك
											   ->complex c = new complex(1,1)ياما تعتمد علي باراميتر كونستراكتور لكن بشوط يكون بياشياليز كل القيم 
											   -> لاكن متقدرش تدخل جوا الاستراكت وتانشياليز القيم بايدك عكس الكلاس كان عادي

			  
- class => keyword new create obj from class in heap based on calling ctor and return location of this obj               VS      	- struct => initialize obj in stack based on calling ctor
		=> can initialize members inside class "give defualt value"                                                       			         => can`t
		=> parameter ctor can initialize only one member only 																				 => parameter ctor must initialize all members
		    لان في الكلاس قبل ما تعمل كول للكونستراكتور كدا كدا نيو كيورد كانت كريتت الاوبجكت وعملت انشياليز للفاريبولز			
		=> if you make parameter ctor , compiler no long generate parameterless ctor  "ليه كدا و الاجابه في النقطع الجايه"                    => at all cases compiler generate parameterless ctor 
		=> ctor : بنستخدمه عشام نتحكم في ازاي نعمل ابوجكت من الكلاس عشان كدا لو انت عملت باراميتر كونستراكتور									"لانه كدا كدا كريشن الاستراكت مش معتد علي الانستراكتور يعني بيه او من غيره هيحصله كريشن"
				الكومبيلر مش هيعمل باراميترليس كونستراكتور عشان يساعدك تحقق اللوجيك انه معدش هيعمل اوبجكت من الكلاس 
				دا غير لما يطبق الكونستراكتورز بتاعتك فقطط 
		=> complex c ; في حاله الكلاس فقط بيحجز مكان في الاستاك لرفيرينس من النوع كومبليكس 													 =>  بيحجز في الاستاك الفاريابول دا 
		=> can create parameterless ctor in class 																							 => can`t
		=> inhiretance avaialbe																											     => not avaialbe [but how can struct inhirete from object?!]
																																			  في حاجات مسموح للكومبايلر يعملها لكن الديفلوبرز لا زي كدا + انه ايه فايده الوراثه وانت فاليو تايب
																																				مش ريفيرنس يعني مش هتقدر تعمل اوفررايد وبوليمرفيزم بشكل عام
		=> can use ' == ' to compare to classes based of reference equals or not 															 => can`t becouse it`s value type [but why int can use it??! boxing] but can use opereator overloading or override function equals
		=> no boxing & unboxing??!!
		
		
- shalow copy => two references for same obj
- deep copy => copy values of this obj

- boxing 'save casting' -> convert from value type to reference type
ليه بنستخدم حاجة زي كدا و نفترض عندنا فانكشن زي اسكوالز اللي كلنا بنورثها من كلاس اوبجكيت دي في كل الحالات مستنيه باراميتر من النوع اوبجكت 
 ليه اخد الفاليو تايب اللي هو مثلا حاجة انتيجر واعمل اوبجكت جواه القيمه دي واخد عنوان الاوبجكت اباصيه للفانكشن؟؟
 ليه ماخدش عنوان الفاليو تايب دا علي طول اباصيه للفانكشن
لاني هنا عملت باسنج باراميتر باي فاليو تايب يعني بعد تنفيذ الفانكشن وموت الاوبجكت دا تظل قيمه الفاليو تايب كما هي 
