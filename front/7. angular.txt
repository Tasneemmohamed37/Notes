https://www.youtube.com/playlist?list=PLesfn4TAj57WJFn86KXOInQAsCdJlp6vl

--------------------- [ session 01 ] ---------------------

- angular -> front-end framework
		  -> SPA [ only one html file ]
		  -> component based [ page contain of components ]
		  -> use MVC arch pattern 
		  -> 1. install npm
		  -> 2. install angular $[npm install -g @angular/cli ]
		  -> 3. in specific folder $[ ng new projectName ]
		  -> 4. in project terminal $[ npm start || ng serve ]

- project structure -> node modules -> contain all modules or packages which are built in or installed 
					-> package.json -> contain all dependencies name and version 
					-> tsConfig.json -> contain cofig used to combine from ts to js 
					-> build -> contain outPath 'files produced from compilation'
					-> index.html -> the only file in the project can type js in it & link this with style using file 'angular.json'
					-> main.js -> contain two func -> bootstrap module 'eager loaded module' -> decide first module to run 'appModule' 
												   -> platform browser dynamic -> use 'polyfiles' based on defualt used browser 
					-> appModule.ts -> contain 4 arrays -> declarations -> contain all components of this module 
														-> imports -> in case want to use any other module
														-> provider -> service providers
														-> bootstrap -> first component to run, for sure this component name found in declarations
					-> appComponent.ts -> contain of -> selctor 
													 -> templetUrl 'html'
													 -> styleUrls

- module contain of many components

- selector -> component directive 'angular tags' used to call component
												   
- project life cycle -> index / main.js / appModule / bootstrap component 'appComponent' / appComponent.ts / selector <app-root> / appComponent.html  

- Decorator design pattern is used to modify the functionality of an object at runtime like '@ngModule' which used with class to make it module

- can send in header request some data like [ content type - token ]

- to install bootstrap -> 1. $[ npm i bootstrap ]
					   -> 2. in file 'angular.json' add style $[ node_modules/bootstrap/dist/css/bootstrap.min.css ] and scripts $[ node_modules/bootstrap/dist/js/bootstrap.bundle.min.js ]
					   
- prob -> in angular can write js only in file index , but what about bootstrap???
  solve -> install angular material 
  
- to add new component -> 1. in src/components open new terminal $[ ng g c component_name --skip-tests ]
					   -> 2. add this selector to appComponent.html 
					   
- structure directive -> $[ *ngFor='let i of arr' ]



--------------------- [ session 02 ] ---------------------

- Data Binding -> one way -> from ts to html -> interpolation {{}} 
											 -> prop binding $[ <img [src]="item.url">] -> between double quests prop will replaced with this value
						  -> from html to ts -> event binding
			   -> two way -> require adding formModules in imports 
			   
- event binding -> when spec event fire in html, call func in ts 
				-> 1. pass primitive data -> $[ <button (click)="printMsg('hello')"></button>]
				-> 2. templete var, pass element using ref -> $[ <input #itemCount> <button (click)="buy(itemCount)"></button>]  note!!! can only use throw html file
				-> 3. pass event args -> $[ <button (click)="printBtn($event)"></button>  printBtn(x:any){x.target.innerHtml = 'lol'}]
				-> 4. view child -> decorator include spec element in html page using tempelte var, can use this element in ts file as you like 'use it instead of doc.getElementByID'
								 -> $[
										<div #divViewChild></div>
										@viewChild(divViewChild) dvc:any
										ngAfterViewInit(): void {
										this.dvc.nativeElement.innerHtml = ''
										}
									]	
									
- two way binding -> 1. normal way -> event + interpolation
				  -> 2. forms module -> 1. inside appModule import formsModule
									 -> 2. each input field must have name
									 -> 3. declare var in ts file 
									 -> 4. in html [(ngModel)] = var 
									 
- $[class.d-none]="prd.categoryID!=selectedCatId" -> use prop bindig to apply spec class 

- Directives -> 1. component directive -> directive with a tempelte 'use class selector'
			 -> 2. structure directive -> change layout of the elements [ngIf - ngIfElse - ngFor - ngSwich]
									   -> can`t use two structure directive with the same element, can solve this using ngContainer 
			 -> 3. attribute directive -> change the apperence or behaviur of particular element [ngClass - ngStyle - ngModel]
			 
- trackBy function -> used to specify iterable objects identity, and so enhance the performance of ngFor in case of change to the collection, and update changed object without re-build the DOM 
				   -> $[ 
						*ngFor="let prd of prdList; let i = index; trackBy:prdTrackByFunc"
					     prdTrackByFunc(index:number, prd:IProduct):number{return prd.id ;}
					   ]

- in case want to filter collection based on spec condition, what is the best performance,use structure directive 'ngIf' or prop bindig '[class.d-none]="prd.categoryID!=selectedCatId"'??
					-- prop binding is best performance, becouse structure directive in run time will remove element from DOM then reload DOM
					
- ngTemplete VS ngContainer -> ngTemplete only work with structure tempelte, but ngContainer by defualt show element but the major benfite that it don`t add element to DOM 

- customer directive -> 1. $[ ng g directive lightBox ]
					 -> 2. in directive ts file ctor $[ constructor(eleRef: ElementRef){eleRef.nativeElement.style.border = '1px solid red';} ]
					 -> 3. add this class selctor to any html element $[lightBox='red']  NOTE!! in case write [lightBox]='readFromPropInTs'
					 
- @hostListener -> is function decorator used to execute function when fire spec event 

--------------------- [ session 03 ] ---------------------

- pipes -> functions used to accept an input value [strings, currency amounts, dates, other dt] separete with ' | ' and return a transformed value.
		-> $[ {{prd.price | currency}} ]
		
- component lifecycle -> 1. ctor => use it in var init | DI
					  -> 2. ngOnChange => call it every time component input decorator params changes [used it when send data from parent to child]
					  -> 3. ngOnInit => connect with api & use service بضيف فيه اي حاجة عايزها تحصل اول ما الكومبوننت يفتح 
					  -> 4. ngAfterViewInit => use it in viewChild
					  -> 5. ngOnDestroy  => close api connection & unsubscribe to observable
					   
- color='red' --> will take value direct
  [color]='red' --> will take value of prop red	

  
- component interAction -> 1. from parent to child -> 1. add child selector into parent html
												   -> 2. inside parent ts file add var $[parentData: string = "from parent";]
												   -> 3. inside child ts add var with decorator '@Input()' to store parent var on it  $[@Input() childData: string = "";]
												   -> 4. in parent html inside child selctor add prop binding $[<app-child [childData]="parentData"></app-child>]
						
						-> 2. from child to parent -> 1. in child ts add var contain data $[childData: string = "sent from child";]
												   -> 2. in child ts add event with declare '@Output()' to send data out side component $[ @Output() myEvent: EventEmitter<string> = new EventEmitter<string>(); ]  note!! import EventEmitter from '@angular/core'
												   -> 3. in child ts emitting event (when click on button || inside ngOnInit) $[ SendData(){ this.myEvent.emit(childData);}]
												   -> 4. in parent html inside child selctor bind on event to get data $[ <app-child (myEvent)="getData($event)"></app-child>]
												   -> 5. implement parent function and save data in component var $[getData(childMsg:string){}]
												   												   
										
- x!: elementRef -> non-null asseration operator  ==> to define this element impossible will be null 
										
- so now we can use any thing inside child in parent use two ways [ @Output | viewChild ] so what different between them?? 
											-> @Output -> use in case there is an event happen
											-> viewChild -> can use it any time 
											
											
--------------------- [ session 04 ] ---------------------

- service -> contain all business logic of component
		  -> 1. $[ ng g s ay7aga --skip-tests ] and add crud operations inside this file 
		  -> 2. inject this service in component ctor then can use it inside 'onInit()'
		  -> in service file found "providedIn:" -> 'root' -> apply singleton design pattern on service
												 -> 'any' -> eager loaded modules share singleton instance however lazy loaded modules get there own unique instance 
												 -> 'module_name' 

- dependency injection -> used to remove hard code depencency 
					   -> can inject using [ ctor | method | prop ]
					  
- routing -> 1. inside file 'app.routes.ts' add paths in routes array $[{path: 'Home', component: HomeComponent} ]  note!!! path name is case sensetave
		  -> note that arrange of routes array importent!! so must start with defualt path $[{path: '', redirectTo: '/home', pathMatch:'full'}] and end with wild card $[ {path:'**', component:NotFoundComponent}]
		  -> 2. inside appComponent.html add $[ <router-outlet></router-outlet> ]
		  -> 3. add the RouterLink, RouterLinkActive, and RouterOutlet to the imports array of AppComponent.
		  -> 4. use routing by add $[ [routerLink]='/Home'] in html file to make it absolute path  and $[routerLinkActive="active"] to apply active class 
		  
- to use defferent layouts use child routes in file 'app.routes.ts' -> 1. add component 'MainLayoutComponent' in html add only $[ <router-outlet></router-outlet> ]
																		$[ 
																		export const routes: Routes = [
																			{path: '', component: MainLayoutComponent,children:[
																				{path: '', redirectTo: '/home', pathMatch:'full'},
																				{path: 'home', component: HomeComponent},
																				{path: 'products', component: ProductsListComponent},
																				{path: 'order', component: OrderMasterComponent},
																			]},
																			{path: 'login', component: LoginComponent},
																			{path:'**', component:NotFoundComponent} // wild card path
																		];
																		]
																		
																		
- to attach id to url -> 1. inside ctor inject route service $[ constructor(private router: Router){}]
					  -> 2. $[this.router.navigate(['/products',prdId]);]

- to get id from url -> 1. inside ctor inject active route service $[ constructor(private activatedRouter:ActivatedRoute){}]
					 -> 2. inside ngOnInit $[ this.activatedRouter.snapshot.params['id']; ]
					 
- so to navigate to specific url -> in ts use 'Router'
								 -> in html use 'routerLinkActive'
								 
- $[ {{prd | json}} ] -> built-in pipe using throw import { CommonModule } from '@angular/common'

- on angular when navigate to same component, will not reload component even if theres change in route parameters
		--> can handle this using 'paramMap' observable $[this.activatedRouter.paramMap.subscribe((p)=>{
																										this.prdID = Number(p.get('id'));
																										this.prd = this.prdService.getProductByID(this.prdID);
																										});
														  ]
														  
														  
--------------------- [ session 05 ] ---------------------

- observable -> implementation for design pattern 'observe' this logic like event  ex[promise, async await]
		     -> in angular or js interacte with observable using library RXjs 'reactiveX'
			 -> to create customer observable $[new observable(callBack func contain next, error, complete)] 'callBack is func passed to another func'
			 -> usefull to handle real time apps كل ما يحصل تغيير الاوبسيرفابول هيبعتلي الداتا الجديدة 
			 -> return unsubscribe function which execute when [ error | complete | call it]
			 -> two types -> cold 'emit value when subscribe it'
						  -> hot 'emit value even if before subscriping واللي ملحقهوش خلاص '
			 -> built in observable -> creating observable [form | interval | range...]
									-> transforming observable [ flatMap | map | buffer ]
									-> filters observable [distinct | take | skip ]
			 
- asynchronous programming 'promise' VS observable -> promise execute code once when event fire, but observable each time change occure will execute code 
												   -> observable can be cancelled using unsubscribe
												   -> observable provide many operators 'map, foreach, filter, filter, reduce...' on returned data 
												   -> observable is lazy executed 'not called untill we subscribe'
												   
- Subject -> sort of bridge or proxy which act both as observe [subscribe for observable] & observable [emit values contain 'next, error, complete'] 
		  -> special type of Observable that allows values to be multicasted to many Observers. 
		  -> While plain Observables are unicast (each subscribed Observer owns an independent execution of the Observable)
		  -> usually used to handle login/logout & add to card [any change occur on body will effect on navbar 'two components'] 

							   
- publishSubject -> emits to an observer only those items that are emitted by the source Observable(s) subsequent to the time of the subscription. لما يحصل سبسكرايب هيبدأ يبعت الفاليوز والحاجات اللي حصلها ايميت قبل كدا مش هتوصله

- ReplaySubject -> emits to any observer all of the items that were emitted by the source Observable(s), regardless of when the observer subscribes

- in case want to treate with function as a read only prop use keyword 'get'


- gaurds -> guards are special classes used to control and manage access to different parts of an application, by decide whether a user can navigate to a particular route or perform certain actions or not
		 -> 1. $[ng g g gaurdName]
		 -> 2. inject service in guard ctor => return boolean;
		 -> 3. app-routing $[{path: 'order', component: OrderMasterComponent, canActivate:[gaurdName]},]
		 -> types -> canActivate -> guard executed when open specific route
				  -> canActivateChild
				  -> canDeactivate -> when leave specific route
				  -> canLoad 
				  

--------------------- [ session 06 ] ---------------------

- json server -> package used to make customized fake api 
			  -> 1. $[npm install -g json-server]
			  -> 2. add file 'db.json' which include your data
			  -> 3. $[json-server --watch db.json]

- HttpClientModule -> angular module contain all method which handle api connection and this method return observable so when use it $[.subscribe()]
			 

- Connect to api ->	1. in 'app.config.ts' add provideHttpClient() to the providers:
				 -> 2. add your baseUrl to file 'environment.ts' 
				 -> 3. create service for each controller to contain -> 1. bmethod for each endpoint 
																	 -> 2. inject in ctor httpClient
				 -> 4. at component ts file -> 1. inject service in ctor [ وكل ما اكلم السيرفيس دي اقول .subscribe()]
											-> 2. inside onInit connect to api using the service

											
- to send info in request header -> 1. create obj from 'httpHeaders' contain data $[ this.httpOption = {
																						headers: new HttpHeaders({
																							'Content-Type': 'application/json'
																							// ,Authorization: 'my-auth-token'
																						})
																						};
																					]
								 -> 2. pass this obj as a parameter to HttpClientModule methods
								 
								 
- Generic serviecs -> used to avoid repeat on code  
				   -> 1. in serviecs folder $[ng g s GenericApiHandler] 
				   -> 2. inject httpClient in ctor and implement [ handle error func - crud methods ]
				   -> 3. crud must return generic DT $[ng g i APIResponseVM]
				   
- interceptors -> classes that implement the HttpInterceptor interface, 
				  used to perform various tasks related to HTTP requests and responses 'layer that any request or response بيعدي عليها'
				  such as adding headers, handling errors, modifying the request or response data, logging, authentication, etc.
				   

- prefer to use ngSubmit with forms -> prevents the default action (submit then reload the page), but only if the form does not contain action, data-action, or x-action attributes. 

- driven forms -> 