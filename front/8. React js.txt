------------------------- [ session 01, week 16.1 ] -------------------

- react -> is a library
		-> SPA 'only one html file'
		-> component based [ page contain of components ]

		
- to create react project -> 1. open folder with vscode $[ npm create vite @latest project_name -- --template react]
						  -> 2. open project with vscode $[ npm i ]
						  -> to run project $[ npm run dev ]

						  
- project structure -> vite.config.js
					-> package.json -> contain all dependencies name and version
					-> index.html -> the only file in the project can type js in it & link this with style using file 'main.jsx'
					-> eslintrc.cjs -> in case of error give warning contain project setting
					-> public -> contain static files which vite can`t edit it 
					-> main.jsx -> convert code in 'app.jsx' to js code and add it to 'index.html'
					-> app.jsx -> contain components selector to show  
					-> app.css -> contain global style
					
- component -> name first letter must be capital letter 
			-> to create component -> 1. add folder with component name and inside it add jsx file $[component_name.jsx]
								   -> 2. inside jsx file write $[rfc] 'react function component' which will generate component syntax extention 'es+7 react snippets'  
			-> jsx file include export function return only one parent element '<React.Fragment></React.Fragment> | <></>' contain all code of component 'html, css, js' 
			-> in oldest version react was class component but in latest version as 16.8 depend on function using HOOKS

- project life cycle -> index / main.jsx / app.jsx

- jsx -> js xml
	  -> js extention allow write html in js file then render it to pure js

 
- class is deserved word in js, so must use instead "className=''"
- when use customer class must consider that in js can`t use special char expect [_ $] 
- any html tag must be closed like <br />


- install tailwind -> 1. $[ npm i -D tailwindcss postcss autoprefixer ]
				   -> 2. $[ npx tailwindcss init -p ]
				   -> 3. in file 'tailwind.config.js' Configure your template paths $ [ content: [ "./index.html","./src/**/*.{js,ts,jsx,tsx}"] ]
				   -> 4. Add the Tailwind directives to your src/index.css $[ @tailwind base;@tailwind components;@tailwind utilities;]
				   -> 5. $[ npm run dev]
				   
- to install bootstrap -> 1. $[ npm i bootstrap ]
					   -> 2. in file 'main.jsx' import style $[ import 'bootstrap/dist/css/bootstrap.min.css' ] and scripts $[ import 'bootstrap/dist/js/bootstrap.bundle.min.js' ]
					   
- to install fontAwsome -> 1. $[ npm i @fortawesome/fontawesome-free ]
					    -> 2. in file 'main.jsx' link $[ import fontawsome/fontawsome-free/css/all.min.css ]
					   
------------------------- [ session 02, week 16.2 ] -------------------

- to run any script in 'package.json' $[npm run ___]

- to write js code inside jsx use curly brackets {}

- to deal with static assets in react -> 1. import img_name from ''
									  -> 2. use this img by {img_name}
									  
- to deal with dynamic assets in react -> $[ <img src={new URL(`../../imgs/${imageUrl}`,import.meta.url).href} /> ]
									   -> import.meta.url -> used to get base url

- in react every thing loged twice becouse in main.jsx $[<React.StrictMode> <App /> </React.StrictMode>]							

- props -> arguments passed into React components via HTML attributes 
		-> 1. in parent camponent pass your params to child component tag $[<Card title='iphone' category='samsung'/>]
		-> 2. in child jsx accept 'props' param which is object contain all passing attributes and access them $[props.title]
		-> 2. or using destruct $[ function Card({title, category})] and using them direct ${title}
  
		
- HOOKS خطاف -> built-in functions react use it to solve 'stateless problem when use function camponent'
			 -> must follow terms to use it -> all them at the top level in the body of a function component or custom Hook [inside component function direct can`t use inside if, loop, other function ]

- State -> A Component's Memory and is isolated and private 'each component has his own state' 
		-> function component 'stateless' have problems as [Changes to local variables won’t trigger renders & if re-render will back to initial var]
		-> react solve these problems using built-in hook 'useState' which return object contain [var - function change value of var]
		-> 1. let [counter, setCounter] = useState(0); --> let [var, 'as a naming convential setVar'] = useState(init_value);
		-> function 'setCounter' each time call it will change counter state value so it allow us to re-render component function and sync between data & ui
		-> commonly use to handle dark & light mood

-> so in case u want when edit var يسمع in ui , make this var state not local 

- conditional rendering -> you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators

- recap -> dom is tree data structure , represent document object as a tree 

- Real DOM -> React update the state changes in Virtual DOM first and then it syncs with Real DOM using 'diffing' algorithm


- to ask -> loading screen with conditional rendering ???

