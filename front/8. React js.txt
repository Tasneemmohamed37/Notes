------------------------- [ session 01, week 16.1 ] -------------------

- react -> is a library
		-> SPA 'only one html file'
		-> component based [ page contain of components ]

		
- to create react project -> 1. open folder with vscode $[ npm create vite @latest project_name -- --template react]
						  -> 2. open project with vscode $[ npm i ]
						  -> to run project $[ npm run dev ]

						  
- project structure -> vite.config.js
					-> package.json -> contain all dependencies name and version
					-> index.html -> the only file in the project can type js in it & link this with style using file 'main.jsx'
					-> eslintrc.cjs -> in case of error give warning contain project setting
					-> public -> contain static files which vite can`t edit it 
					-> main.jsx -> convert code in 'app.jsx' to js code and add it to 'index.html'
					-> app.jsx -> contain components selector to show  
					-> app.css -> contain global style
					
- component -> name first letter must be capital letter 
			-> to create component -> 1. add folder with component name and inside it add jsx file $[component_name.jsx]
								   -> 2. inside jsx file write $[rfc] 'react function component' which will generate component syntax extention 'es+7 react snippets'  
			-> jsx file include export function return only one parent element '<React.Fragment></React.Fragment> | <></>' contain all code of component 'html, css, js' 
			-> in oldest version react was class component but in latest version as 16.8 depend on function using HOOKS

- project life cycle -> index / main.jsx / app.jsx

- jsx -> js xml
	  -> js extention allow write html in js file then render it to pure js

 
- class is deserved word in js, so must use instead "className=''"
- when use customer class must consider that in js can`t use special char expect [_ $] 
- any html tag must be closed like <br />


- install tailwind -> 1. $[ npm i -D tailwindcss postcss autoprefixer ]
				   -> 2. $[ npx tailwindcss init -p ]
				   -> 3. in file 'tailwind.config.js' Configure your template paths $ [ content: [ "./index.html","./src/**/*.{js,ts,jsx,tsx}"] ]
				   -> 4. Add the Tailwind directives to your src/index.css $[ @tailwind base;@tailwind components;@tailwind utilities;]
				   -> 5. $[ npm run dev]
				   
- to install bootstrap -> 1. $[ npm i bootstrap ]
					   -> 2. in file 'main.jsx' import style $[ import 'bootstrap/dist/css/bootstrap.min.css' ] and scripts $[ import 'bootstrap/dist/js/bootstrap.bundle.min.js' ]
					   
- to install fontAwsome -> 1. $[ npm i @fortawesome/fontawesome-free ]
					    -> 2. in file 'main.jsx' link $[ import fontawsome/fontawsome-free/css/all.min.css ]
					   
------------------------- [ session 02, week 16.2 ] -------------------

- to run any script in 'package.json' $[npm run ___]

- to write js code inside jsx use curly brackets {}

- to deal with static assets in react -> 1. import img_name from ''
									  -> 2. use this img by {img_name}
									  
- to deal with dynamic assets in react -> $[ <img src={new URL(`../../imgs/${imageUrl}`,import.meta.url).href} /> ]
									   -> import.meta.url -> used to get base url

- in react every thing loged twice becouse in main.jsx $[<React.StrictMode> <App /> </React.StrictMode>]							

- props -> arguments passed into React components via HTML attributes 
		-> 1. in parent camponent pass your params to child component tag $[<Card title='iphone' category='samsung'/>]
		-> 2. in child jsx accept 'props' param which is object contain all passing attributes and access them $[props.title]
		-> 2. or using destruct $[ function Card({title, category})] and using them direct ${title}
  
		
- HOOKS خطاف -> built-in functions react use it to solve 'stateless problem when use function camponent'
			 -> must follow terms to use it -> all them at the top level in the body of a function component or custom Hook [inside component function direct can`t use inside if, loop, other function ]

- State -> A Component's Memory and is isolated and private 'each component has his own state' 
		-> function component 'stateless' have problems as [Changes to local variables won’t trigger renders & if re-render will back to initial var]
		-> react solve these problems using built-in hook 'useState' which return object contain [var - function change value of var]
		-> 1. let [counter, setCounter] = useState(0); --> let [var, 'as a naming convential setVar'] = useState(init_value);
		-> 2. $[ function increaseCounter(){setCounter(++counter)} ]
		-> function 'setCounter' each time call it will change counter state value so it allow us to re-render component function and sync between data & ui
		-> commonly use to handle dark & light mood

-> so in case u want when edit var يسمع in ui , make this var state not local 

- conditional rendering -> you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators

- recap -> dom is tree data structure , represent document object as a tree 

- Real DOM -> React update the state changes in Virtual DOM first and then it syncs with Real DOM using 'diffing' algorithm


------------------------- [ session 03, week 17.1 ] -------------------

- component lifecycle -> 1. mounting phase -> occur when component render and insert in dom
										   -> inside it [initailly set value of useState / render / useEffect(()=>{},[]) ]
					  -> 2. updating phase -> occur when component is updated [state change | props change | parent re-render | context change]
										   -> inside it  [ render / useEffect(()=>{},[dependency arr]) ] 
					  -> 3. unmount phase  -> occur when component remove from dom 
										   -> inside it useEffect(()=>{return ()=>{}},[])


- Pure functions -> functions in js produce the same output for a particular input every time they are called. 
- impure functions -> can have side effects and produce different outputs for the same input. [usualy function depend on var outside it]

- problem -> when has function fetch data from api will get into infinte loop becouse this function has side effect and it isn't pure function
- solve -> hook 'useEffect()' to handle side effect

- useEffect -> React Hook that lets you synchronize a component with an external system.
			-> take 2 param (func, dependency arr) and depend on array will execute this function -> if arr is empty will execute in initial render only 'mounting phase' 
																								  -> if arr contain data, will execute in initial render & change state data 'updating phase'
																								  -> if arr is empty & func return other func, will execute in unmount phase
			->  commonly used to call api in mounting phase 


- call api by useState & useEffect -> 1. useState to trach apiResponse and initial it by null or empty array $[const [trendingMovies, setTrendingMovies] = useState(null);]
								   -> 2. add function to fetch data and make useState variable value equal apiResponse $[ async function getTrendyMovies(){
																															const response =await fetch('https://api.themoviedb.org/3/trending/movie/day?api_key=ac7e5c509c05c95a09ccc13bb434f9f4');
																															const data = await response.json();
																															setTrendingMovies(data.results);}
																														]
								   -> 3. useEffect to call function which fetch data $[ useEffect(()=>{getTrendyMovies()},[]); ]
								   -> 4. in return chech useState variable if still null then show loading else display data $[{(trendingMovies == null)? <Loading/> : trendingMovies.map((m)=>{return <MovieCard movie={m}/>}) ]


- call api by axios -> highly recommended becouse more supported by browsers than fetch & more secure 
					-> 1. $[ npm i axios]
					-> 2. $[ const {data} = await axios.get('https://api.themoviedb.org/3/trending/movie/day?api_key=ac7e5c509c05c95a09ccc13bb434f9f4'); ]

- recommended to use react dev tools to get more console features
					
					
- uncontrolled element -> form elements DOM controll them not component
					   -> so only apply validation when submit, to solve this must make this element controlled
					   
					   
- controlled elements -> by it we can apply real time validation 
					  -> 1. add state for each form element 'commonly used with input, textarea, select' $[ const [name, setName] = useState(''); ]
					  -> 2. make element value equal state variable and onChange call state func passing to it current value $[
																																 <input
																																	type="email"
																																	value={email}
																																	onChange={(e) => {
																																		setEmail(e.target.value);}}
																																	/>
																															   ]
					  
					  
------------------------- [ session 04, week 17.2 ] -------------------
					  
- style in react -> 1. inline style, add style attribute style equal object $[ <div style={{color:"red", border:"5px solid red" }}></div> ]
				 -> 2. global style, add style to file 'index.css' which linked with 'main.jsx'
				 -> 3. module.css, style file for specific component -> 1. add file 'component_name.module.css'
																	 -> 2. link it with component.jsx by $[import styles from 'url' ] 
																	 -> 3. but classes names hashed so can access them by import file name $[ <div className=`${styles.container}`></div> ]
																	 

- Formik Essentials -> react library used to handle [getting values in & out of form state - validating and error messages - form submission] 
					-> 1. $[npm i formik]
					-> 2. create obj from formik hook passing to it obj contain init values and onSubmit $[ const formik = useFormik({
																															initialValues:{
																																email:"",
																																password:""
																															},
																															onSubmit:handleSubmit
																															});
																											function handleSubmit(values){console.log(values);}
																										   ]
					-> 3. link form with formik using onSubmit $[ <form onSubmit={formik.handleSubmit}></form>]
					-> 4. for each form element $[	name="email"
													value={formik.values.email}
													onChange={formik.handleChange}
												 ]
					
- to apply customer validation using formik -> 1. add prop to formik obj $[validate: validateForm]
											-> 2. function validateForm must return errors obj $[
																									function validateForm(values) {
																										const errors = {};
																										if (!emailRegex.test(values.email))
																											errors.email = 'Email is required, and must contain @';
																										if (!passwordRegex.test(values.password))
																											errors.password = 'Password is required, and must contain at least one capital letter and one special character';
																										return errors;}
																								] 
											 -> 3. foreach input add attribute $[onBlur={formik.handleBlur}] to validate input only when touch it
											 -> 4. display error details after input $[ {(formik.errors.email && formik.touched.email) ? (
																							<div className="text-red-600 font-bold mt-3">
																								* {formik.errors.email}
																							</div>
																							):("")}
																					   ]
																					   
																					   
- validation using yup -> 1. $[npm i yup]
					   -> 2. $[import * as Yub from 'yup']
					   -> 3. add prop to formik obj $[validationSchema: validateSchema]
					   -> 4. create schema which is yup obj $[const validateSchema = Yup.object({
														        email: Yup.string().required('Email is required').email('email must contain @'),
																password: Yup.string().required('Password is required').matches(passwordRegex,'Password must contain at least one capital letter and one special character')
																	});
															 ]
					   -> 5. foreach input add attribute $[onBlur={formik.handleBlur}] to validate input only when touch it
					   -> 6. display error details after input $[ {(formik.errors.email && formik.touched.email) ? (
																							<div className="text-red-600 font-bold mt-3">
																								* {formik.errors.email}
																							</div>
																							):("")}
																] 
																
																
- routing -> 1. $[npm i react-router-dom]
		  -> 2. in file app.jsx $[
									const routes = createBrowserRouter([
										{path: "/", element: <MainLayout />, children: [
											{index: true, element: <Home />},
											{path:"home", element: <Home />},
											{path:"movieDetails/:id", element: <MovieDetails />, loader: DetailsLoader},
											{path: "/trending", element: <Trending />, children: [
												{index: true, element: <Navigate replace to={'movies'}/> },
												{path: "movies", element: <h2 className="mt-20">movies</h2>},
												{ path: "people", element: <h2 className="mt-20">People</h2> },
												{ path: "tv", element: <h2 className="mt-20">Tv</h2> },
											],
											}
										]
										},
										{ path: "login", element: <Login /> },
										{ path: "*", element: <NotFound /> },
									]);
									
									return (
										<>
										<RouterProvider router={routes}></RouterProvider>
										</>
									)
								 ]
		  -> 3. inside component mainLayout $[return 
												<>
													<Navbar />
													<Outlet />
													<Footer />
												</>
											 ]
		  -> 4. to navigate to specific path -> $[<NavLink to='' ><NavLink/>]
											 -> $[navigate('')]
		  -> 5. in navbar component handle class active using module.css -> 1. add file 'navbar.modle.css' inside it $[.nav :global(.active) {background-color: limegreen;}]
																		 -> 2. in navbar.jsx -> 1. $[import styles from './Navbar.module.css']
																							 -> 2. $[<nav className={`${styles.nav}`}>]
		  -> 6. to get params $[const params = useParams(); console.log(params.id);]
		  -> 7. to get query params $[const [queryParams, setQueryParams] = useSearchParams(); console.log(queryParams.get("id"))]
		  -> 8. loader -> will not execute router path until call function and return data -> 1. in component file add func loader outside component function scope $[export async function loader({ params }) {return data}]
																						   -> 2. in component function recieve data from loader using hook 'useLoaderData' $[const details = useLoaderData();]
																						   -> 3. in 'app.jsx' -> 1. $[ import MovieDetails, {loader as DetailsLoader} from ""; ]
																											  -> 2. $[ {path:"movieDetails/:id", element: <MovieDetails />, loader: DetailsLoader} ]


		  
- 100% if write nestead route, will use <outlet/> 

- to ask ? 1. auto importe when use component
		   2. when make home like trending/movies using navigate, still not active[want make it active by defualt and wher write /home]
		   3. in case want to use css color var ?