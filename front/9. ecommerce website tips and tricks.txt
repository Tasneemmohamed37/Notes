------------------------- [ session 05, week 18.1 ] -------------------

- in case have style which repeated can make class contain it then call that class -> 1. in file 'index.css' $[
																												@layer components {
																													.form-control {
																														@apply outline-none border-2 border-gray-200 px-3 py-1 rounded-lg
																													}
																												}
																												]
																					-> add customer classes in component layer so can override it by utilities
																					
- to add global var colors -> 1. in file tailwind.config.js extend $[
																		extend: {
																			colors:{
																				mainColor: '#0aad0a',
																				lightColor: '#f0f3f2',
																				ratingColor: '#ffc908',
																			}
																			},
																	]

- to make footer in the end of page even it there isn't content -> 1. footer className='absolute left-0 right-0 botton-0'
																-> 2. in index.html div with id root className='relative min-h-screen'
																
- in phone number input form use type='tel'

- to use specific font in file index.css -> $[
												@import url("https://fonts.googleapis.com/css2?family=Encode+Sans+Expanded:wght@300&display=swap");
												body{
													font-family: "Encode Sans Expanded", sans-serif;
												}
											 ] 
											 
- to validate repassword with password on registeration using yup $[.oneof([yub.ref('password')])] 

- onSubmit function in case success want to navigate to login but can't use hook inside func -> solve it by locate hook in var and use this var inside func $[const navigate = navigate()]


------------------------- [ session 06, week 18.2 ] -------------------

- can handle class active using tailwind instead of modules -> for each navLink $[ className = { ({isActive})=>{return `${isActive?'bg-lime-500':''}`} } ]

- static assets while will not import it usualy store in public folder like logo img 

- to make cards same hight and solve prob of long text using tailwind $[lime-clamp-2]

- for slider can use library 'wipper.js' -> 1. npm install swiper
										 -> 2. inside main.jsx $[
																	import { register } from 'swiper/element/bundle';
																	register();
																]
																
- to handle auth -> 1. add file 'user.context.jsx' $[
														export const userContext = createContext(''); // return obj 
														export default function UserProvider({children}){
															const [token, setToken] = useState(localStorage.getItem('token'));
															function logOut(){
																setToken(null)
																localStorage.removeItem('token')
															}
															return <userContext.Provider value={{token, setToken, logOut}}>
																	{children}
															</userContext.Provider>
														}
													]
				 -> 2. add component authGard $[export default function AuthGard({ children }) {
												const {token} = useContext(userContext);
													if (token){
														return children 
													}
													else{
														return <Navigate to='auth/login' />
													}
											}] 
				 -> 2. handle your auth layout
				 -> 3. in app.jsx $[
									   const routes = createBrowserRouter([
										{path: "/", element:
										<AuthGard>
											<MainLayout />
										</AuthGard>, 
										children: [
										{index: true, element: <Home />},
										{path:"home", element: <Home />},
										{ path: "*", element: <NotFound /> },
										]
										},
										{path: "auth", element:
											<AuthLayout />, 
										children: [
										{ path: "login", element: <Login /> },
										{ path: "signUp", element: <SignUp /> }
										]
										},
									]);
									
									return (
										<>
										<UserProvider>
										<RouterProvider router={routes}></RouterProvider>
										<Toaster/>
										</UserProvider>
										</>
									)
													]
				-> 4. in login component before navigate to home $[localStorage.setItem('token',data.token)
																   setToken(data.token)
																  ]
			    -> 5. in vav bar using conditional rendering handle apperence and logOut
			
- component interactions -> only can send data from paren to child using props... what about send from child to parent or child to child???
						 -> handle this using 'left state up' -> add state in parent component then pass it to childes 
						 
- anti paterns -> commonly-used process, structure or pattern of action that, despite initially appearing to be an appropriate and effective response to a problem, has more bad consequences than good ones. Another solution exists to the problem the anti-pattern is attempting to address.													
			   -> example: props drilling -> same data is being sent at almost every level due to requirements in the final level

-  to solve this use contextProvider -> commly used to contain some thing all website need it like token 
									 -> ببساطه بعمل كومبوننت يكون بيرنت لكل الباقي ولو حد محتاج المعلومه دي يطلع وياخدها
									 -> 1. add file 'counter.context.jsx' $[
																			import { createContext, useState } from "react";
																			export const counterContext = createContext(0); // return obj 
																			export default function CounterProvider({children}){
																				const [counter, setCounter] = useState(0);
																				return <counterContext.Provider value={{counter, setCounter}}>
																						{children}
																						</counterContext.Provider>
																			}
																			]
									 -> 2. in file app.jsx return $[<CounterProvider> other components </CounterProvider>] 'name of exported func'
									 -> 3. in any component $[const {counter, setCounter} = useContext(counterContext)] 'name of obj'