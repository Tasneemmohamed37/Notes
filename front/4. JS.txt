------------------------- [ Session 1 , Week 8.1 ] ----------------

- we use JS for -> Interaction
				-> validation
				-> feching APIs
				
- where write JS -> inline
				 -> internal -> inside script tag , before body tag closed
				 -> external -> script tag with 'src' attribute , before body tag closed
				 
- or can write tag script in head without any probrems by use attribute [defer || async]

- select element with js => document.getElementById("")

- to get input => window.prompt("msg to show") --> always return string 

- variables => use keywork var to declare this var then equal to intialize it [ $ var x = 1 ;]

- can use [$ , _ ] from special chars to vars name , but as name of convential use camelCase

- variables are case sensetive

- js is loosly type programming lang & dynamic lang 'بعرف فاريبول انت مثلا وبعدها اخليه سترنج عادي وهكذا'

- data types => primitave -> string , number , undefinde , null , bool , bigInt , symbol
			 => non primitave -> object, arr, func 
			 
-values => truthy 
		=> falsy  -> empty string / NaN / zero / false / null / undefinde
		
- undefinde -> var declare and not initialized
- null -> no value
		
------------------------- [ Session 2 , Week 8.2 ] ----------------

- Explicite casting => dt(var) -> $ number(string) -> NaN
							   -> $ number("15") -> 15
							   -> $ number("15test") -> NaN
							   -> $ number("") -> zero
							   -> $ number(true) -> 1 
							   -> $ number(undefinde) -> NaN
							   -> $ number(null) -> 0
							   -> $string (any thing) -> 'any thing'
							   
							   
- operators => unary 'operator work only one value' -> $ +("15") -> 15
													-> $ -("15") -> -15
													-> $ ++
													-> $ --
													-> $ typeof NaN -> number
			=> arthmatic operator -> [ + | - | * | / | % ] -> all them cause implicite conversion exepte '+' becouse it also use in concatenate strings
			=> assignment operators -> [ = | += | -= | *= ]
			=> comparision operators -> [ > | < | >= | <= | == | === ]
			=> logical operators -> [ && , || , !]
			
- operators periority => 

- typeof typeof bool -> string

- == -> compare values 
- === -> compare data type and value

- $ var x = 'test'
  $ console.log(!!x) ==> true 
  
- NaN == NaN -> false 

------------------------- [ Session 3 , Week 9.1 ] ----------------

- while loop prefer to used in case not know iteration numbers 

- if you want random number from 1 to 6 => math.trunc(math.random()*7) -> math.trunc() بتشيل الكسر 
																	   -> math.random() رقم عشوائي من الزيرو للواحد 
																	   
- function fName(){}

- when call or invoke function and pass parameter to it , it call argument => function fName(parameter)
																		   => fName(argument)
																		   
- ex => function calcSum(x,y){console.log(x+y)}
		console.log(calcSum(5,6)) ==> 11 , undefinde
		
- in JS can declate more than one var with same name and call based on scope ==> this not work in ES6

- scope => local -> var inside func  ممكن نعتبره برايفيت
		=> global
		
- function types => declaretion function تبدأ بكلمه فانكشن  -> occure hoisting so can use it in line before line of function body
		         => expression function -> var x = function(){} -> if you call var in line before line of function will get error 
				 => IIFE 'imiddiatly invoke function expression' -> self invoke function ->> (function(){})()
				 
- hoisting => JS compile code by collect all declard vars first , then execute code line by line
		   => ex : console.log(x) ; x=10; --> undefinde 
		   
------------------------- [ Session 4 , Week 9.2 ] ----------------

- obj -> container for collection of props & methods 
	  -> non primitave data type - reference data type
	  -> $ var x = {key: value ,}
	  
- to access obj prop -> dot notation $person.son.name
					 -> praket notation $person["son"]["name"]
					 
- in case prop is number can access it only use praket notation

- expression -> حاجة في الاخر تتفك لفاليو واحدة

- add prop to obj -> person.address = "maddii"
				  -> person.eat = function(){}
				  
-  remove prop from obj -> delete person.address

- method -> func inside obj 

- window is base obj for all objs

- array[] -> container for different dt 
		  -> $arr.Push() add element to end of array and return new lenght 
		  -> $arr.unShift() add element to start of array and return new lenght 
		  -> $arr.pop() remove element from end of array and return deleted element
		  -> $arr.Shift() remove element from start of array and return deleted element
		  -> splice -> add -> arr.splice(startIndex , 0 , element)
					-> remove -> arr.splice(startIndex , deletedCount) return deleted elements
					-> update -> arr.splice(startIndex , 1 , newElement)
		  -> slice (startIndex , endIndex'not icluded') تاخد جزء من الاراري ومبتعدلش عليها 
		  -> sort ترتب ابجدي حتي لو كانوا ارقام
		  -> icludes('elementToFind',startIndex) -> return bool
		  -> indexOf('element') -> return first match , if not found return  -1 
		  
------------------------- [ Session 5 , Week 10.1 ] ----------------

- innerHTML => don`t used with empty tags , use insted of it [element.value]

- local storage => file in client hard , each browser has separete file
				=> to add any thing to local storage [ $localStorage.setItem(key, value)] and both key, value are string
				=> $localStorage.getItem(key) -> key has value ? value : null
				=> commonly used for -> store user prefers like dark mood or ligth
									 -> store form data to easly edit it before submit by add func and call it in input use attribute [ $onInput(func()) ]

- session storage => save data untill browser tab opened 
				  
- problem value of key in localStorage must be string -> can solve it useing [$ JSON.stringify()]

- to make input retrive only img use attribute [$ accept="image/*"] & to make it retrive more than photo or file use attribute [ $multiple]



------------------------- [ Session 6 , Week 10.2 ] ---------------
- string built-in functions => split  -> convert string to array based on specific seperators 
							=> slice (startIndex , endIndex 'not included')
							=> include -> return bool 
							
- RegEx -> can use 'RegEx vis' website ti understand specific regex
		-> can use 'RegEx 101' website to test 
		-> can use 'iHateRegEx' website to get regex 
		-> $/[a-Z]/ -> one lowerCase char from a to z 
		-> $/[A-Z]{3,5}/ -> 3 or 4 or 5 upperCaseChar char from a to z 
		-> $/{0,}/ -> from 0 to infinity
		-> $/([1-7][0-9]|80)/ -> number from 10 to 80
		-> $/^(\+2)?01[0125][0-9]{8}$/ ->  egy numbers 
		

------------------------- [ Session 7 , Week 11.1 ] ---------------

- DOM -> document object model تمثيل للحاجات الموجودة في دوكيومينت في هيبئة اوبجيكت عشان لغات البرمجة تقدر تتعامل معاة
	  -> used in -> events 
				 -> DOM traversing عن طريق عنصر واحد اقدر اوصل لاي عنصر في التري 
				 -> DOM manpulation 
	  
- DOM TREE -> contain of -> node -> element
								 -> text
								 -> attribute
								 
- different wayes to select html element in js => 1. document.getElementsByTagName("h2") -> htmlCollection [""] | []
											   => 2. document.getElementsByClassName("") -> htmlCollection [""] | []
											   => 3. document.getElementById("") -> element | null
											   => 4. document.getElementsByName("") -> nodeList | [] ايوة اكتر من عنصر هيكون له نفس الاسم زي الراديو مثلا
											   => 5. document.querySelector("") -> first match element | null
											   => 5. document.querySelectorAll("") -> nodeList | []
											   

- htmlCollection VS nodeList => both have [length prop, access element using index, can loop throw, not support array methods]
							 => htmlCollection [can get element inside it using id or name ]
							 
- function is first class citizen => can be assigned to a variable
								  => can be stored inside object
								  => can passed as an argument to another function [$repeat(sayHello)]
								  => can return another function
								  
- $repeat(sayHello) -> pass function as an argument
- $repeat(sayHello()) -> execute function first then pass return from this function as an argument


- by defualt function of event has parameter 'event enfo' , can call it any thing -> $ e.target [ access event invoker]


- event bubbling -> when element receives an event, and that event bubbles up to its parent and ancestor elements in the DOM tree until it gets to the root element
				 -> to convert sequence add parameter 'true' to addEventListenr and this call event capturing
				 -> can prevent it using $ e.stopPropagation
				 

------------------------- [ Session 8 , Week 11.2 ] ---------------

- DOM traversing -> parentElement
				 -> children -> htmlCollection of elements
				 -> childNodes -> nodeList of nodes
				 -> querySelector -> element تدخل جوا التري وتدور
				 -> closest -> element تطلع لفوق وتدور 
				 -> nextElementSibling -> element
				 -> nextSibling -> node
				 

- DOM manpulation -> innerHTML لما اجي ازود بيمسح القديم ويزودلي علية 
				  -> innerText التيكست اللي ظاهر لليوزر
				  -> textContent كل التيكست حتي الحاجات اللي واخده دسبلاي نل 
				  -> append (push node) بيضيف في الاخر من غير ما يمسح القديم 
				  -> prepend (push node) بيضيف في الاول من غير ما يمسح القديم 
				  -> after يضيف بعد العنصر نفسه 
				  -> before يضيف قبل العنصر نفسه 
				  
- element.classList -> add | remove | replace
					-> toggle (class found? delete : add) 
					
------------------------- [ Session 9 , Week 12.1 ] ---------------

- JS engine -> storing variables -> stack [primitave dt] which include global execution context [identifier, address, value]
								 -> heap [non primitave]
			-> execute code -> when call func make a context for it and add to stack then execute by [LIFO]


- API -> application programming interface 

- to send ajax call create obj from XMLHttpRequest -> $[var myHttp = new myHttpMLHttpRequest();
														myHttp.open("GET","https://ecommerce.routemisr.com/api/v1/products");
														myHttp.send();
														myHttp.addEventListener("readystatechange", function(){
															if(myHttp.readyState == 4)
															console.log(JSON.parse(myHttp.response).data);
														})]
												   
												   
- readyState -> 0 -> unsend, mean not call open yet
			 -> 1 -> opened
			 -> 2 -> headersReceived
			 -> 3 -> loading
			 -> 4 -> done
			 
------------------------- [ Session 10 , Week 12.2 ] ---------------

- prob -> code not execute with same order write it becouse sync, async
- solve -> 1. callback function [function(callback_func)] -> prob : callback hell
		-> 2. promise 'obj has methods'  $[var x = new promise(function (resolved, rejected){
												console.log('first');
												resolved();
											});
											function second (){console.log('second');}
											function error (){console.log('error');}
											
											x.then(second),catch(error);
										  ]
		-> 3. await, but must apply some terms [await keywork write in async func - write before function return promise]
		

- built in function 'fech' by defualt 'GET' -> $[ async function getPizza(){
													var response = await fetch("url",
													{
														method : "",
														body : "",
														header : ""
													});
													var data = await response.json();
													console.log(data);
													}
												]

- can use 'dribbble' website to get designs
