----------------------- [session 01 ] --------------------

------------ [ 1.1 ]
- miniaml APIs -> end points without controller
- in API handel routing in each controller unLike mvc handel it once in program file
- appsetting -> include setting per invironment [dev | test | staging | production]
- restful API -> can execute endPoint only with [controller name + verb]
- middelware app.Mapcontroller() -> work like [app.useRouting "match request to endPoints" + app.useEndPoints "execute matching endPoint"]

------------ [ 1.3 ]
- graphQL -> minimize the number of requests and responses.


------------ [ 1.4 ]
- Union Arch -> 1. Domain layer [domain models - all Interfaces] 
					also name as core layer becouse it contain all project but not implemented
			 -> 2. Repository layer [repos - DbContext - fluentAPI - ]	
			 -> 3. Service layer [ payment service - cashing service - order service - auth service]
			 -> 4. Persentation layer [ controlles - DTOs ]

------------ [ 1.5 ]
- rel between product & category is 1:M but in case we make one nav prop in product only this rel will be 1:1 so must use fluentAPI
			 
------------ [ 1.6 ]
- packages -> sql   :repo layer [context] 
		   -> tools : PL [connection string]
		   -> redis : core 
		   -> identity : core

- references -> API -> repo
			 -> repo -> core
			 -> services -> core 
			 -> api -> service
			 
- to apply fluentAPI using class -> class:IentityTypeConfiguration
								 -> override onModelCreating then apply configuration from assembly to apply all classes [ REFLECTION ]

------------ [ 1.7 ]
update database using obj from dbContext => 1. every time run project apply all migrations which wasn`t apply
										 => 2. use this context obj in data seeding
										 => steps -> in program class after builder.build create obj from dbcontext  by Ask Explicitly [ create scope - services - context obj - migrateAsnc]

----------- [ 1.8 ]
- data seeding -> read json files then desrialize 'convert from json' to list of this data type then add it to DB finally save changes

----------- [ 1.9 ]
- find => search local first if not found then search remote

----------- [ 1.11 ]
- by defualt nav prop not load , can load it using one of 3 approaches -> explicite [ .load ]
																	   -> eager loading [ Include ]
																	   -> lazy load [ proxies package ]


---------------------------------------------------- [ Session 02 ] --------------------------------------------

--------- [ 2.1 ]

- specification design pattern => used to build dynamic queries 
							   => من غيرة كان عندنا مشكلة وهي في الجينيرك ريبو لما كان نحتاج نعمل انكلود للنافجيشن بروبرتي كنا بنضطر نشتغل ب مسكن ونعمل اكتر من كونديشن للتايب اللي هنشتغل عليه 
							   => steps -> 1. detecte query components [ex : inputQuery '$ _dbContext.set<T>' / where condition / list of includes ]
										-> 2. ISpecification interface include prop signiture for each query component
										-> 3. baseSpecification class implement this interface and contain auto prop 
										-> 4. specificationEvaluator class include function build query by take as a parameter [inputQuery , ISpecification ]
										-> 5. generic repo work with function which build query 
										-> 6. for each entity with includes make class inhirate from baseSpecification , condition 2 ctors one with criteria and other without 
										-> 7. in controllers create obj from class in step 6 to create spec 
										
										
- aggregate =>  accumirate over sequence
			=> ex : $ string[] names = ["tasneem" , "mohamed" , "elhussiny"]
					$ string msg = 'hello'
					$ msg = names.aggregate(msg , (str1 , str2) => $"{str1} {str2}" );
					result ==> hello tasneem mohamed elhussiny
					
---------- [ 2.4 ]

- prob -> retreved data contain nested obj [data of product include data of nav props] , and want make it flat 
- solve -> DTO [data to obj] in api layer 
		-> auto mapper package in api layer
		-> class mappingProfiles which include map for all profiles in his ctor and inhirate from profile class 
		-> in program file allow DI for auto mapper  $ builder.Services.AddAutoMapper(typeof(mappingProfiles)); [work transiant becouse for sure in one request need to map only one time ]
		-> in controller ctor inject Imapper and in end point map [ $ _autoMapper.Map<S,D>(S data)]
		
		

----------- [ 2.5 ]

- resolve pic url -> inside helpers folder add class productPicUrlResolve which inhirate form class 'Ivalue resolver<S,D,SMemberDataType>'
				  -> inside appSetting add baseUrl
				  -> in class mappingProfiles add for product map [ $ForMember(d => d.PictureURL , O => O.MapFrom<productPictureUrlResolve>())]
				  -> in program class use middelware '$ app.useStaticFiles'
				  
------------ [ 2.7 ]

- null coalescing operator '??'  => x = y ?? 4 [incase y iis null then x will equal to 4]

- want to make error response standered for all error types -> 1. add folder errors in api layer then add class 'apiResponse' دا اللي هيكون جواه شكل الاوبجكت اللي احنا عايزين نعمله ريتيرن في حاله حصل ايرور
															-> 2. in endPoints check if there is error create obj from apiResponse and pass error code to it 
															
----------- [ 2.8 ]

- validation error handling -> ex : occur when endPoint take int parameter and pass to it string كدا فعليا طلبنا ايند بوينت مش موجودة لكن بنلاقي ريسبونس باد ريكوست 
							-> there is defualt configuration generate this response 
							-> 1. create class apiValidationErrorResponse : apiResponse(400) [becouse validation error type of bad request error]
							-> 2. in program class before app.build configure apiBehaviorOptions

----------- [ 2.9 ]

- handel server error -> errors like exeptions 
				      -> target -> when exeption occur response with object include [ status code - message - exeption details in case development mood]
					  -> 1. in folder errors add class 'apiExeptionResponse' which inhirate form apiResponse
					  -> 2. add folder middelwares in api layer add class 'exeptionMiddleware' which a custom middelware and include function 'invokeAsync'
					  -> 3. in program class add this middelware as first one 
					  

---------------------------------------------------- [ Session 03 ] --------------------------------------------

---------- [ 3.1 ]

- handle not found end point -> target to redirect to specific end point 
							 -> 1. add errorController which has Route("errors/{statusCode}") and include error end point 
							 -> 2. in program class before redirection middelware use $app.UseStatusCodePagesWithReExecute("errors/{0}"); // rexecute will generate response by one request only 
							 
----------- [ 3.2 ]

- want to improve swagger documentation so each endPoint show response obj structure -> for each endPoint use attribute $ [ProducesResponseType(typeof(ProductToReturnDto), StatusCodes.Status200OK)]
																														$ [ProducesResponseType(typeof(ApiResponse), StatusCodes.Status404NotFound)]
																														

---------- [ 3.3 ]			

- extention method -> function parameter prefix with this keyword بحيث اللي بيعملها كول هيكون هو الباراميتر 
																											
- want to clean up program class ->  by collect all DI code in function and make it extention for services and in class program '$build.service.applicationServices'
							     -> 1. add folder extentions in api layer and add class 'applicationServicesExtention'  
								 -> 2. inside this class add function 'applicationServices' which take as a parameter (this IServiceCollection) and cut DI services from program then paste it here
								 -> 3. in class program $ builder.Services.ApplicationServices();


------------ [ 3.5 ]

- IQuerable -> best performance in case of filtretion [ filter in db then bring data ]
- IEnumrable -> parent interface for all collections best performance in case of read only & Iteration
- ICollection -> handle insert , update , delete on data
- IReadOnlyList -> best performance in case of casing & readable random access without filtretion or Iteration or insert , update ,delete


------------ [ 3.6 ]

- want to apply sort products -> 1. in interface 'ISpecification' add prop signiture for orderBy & orderByDes
							  -> 2. in class 'BaseSpecification' add 2 functions 'addOrderBy' & 'addOrderByDesc'
							  -> 3. in ctor of class 'ProductWithTypeAndBrandSpecifications' check if sort not null then swich it and call these functions
							  -> 4. in class 'SpecificationEvaluator' check orderBy & orderByDes if not null then order
							  -> 5. in getAll product endPoint pass parameter string 'sort'
							  
							  
------------ [ 3.7 ]

- want to apply filtretion on products -> 1. in core layer , folder specification add class 'productSpecParams' which include [sortType , typeId , brandId]
									   -> 2. edit class 'ProductWithTypeAndBrandSpecifications' make it chain to base ctor which take criteria as a parameter and pass as a parameter 'productSpecParams'
									   -> 3. in getAll product endPoint pass as a parameter '$[fromQuery]productSpecParams' // use fromQuery becouse obj by defualt send in body but this end point is get so not have body 
									    
------------ [ 3.8 ]

- apply pagination -> 1. in class 'productSpecParams' add prop 'pageIndex' & full prop 'pageSize' // to apply validation on it 
				   -> 2. in interface 'ISpecification' add prop signiture for take & skip & isPaginationEnabled
				   -> 3. in class 'BaseSpecification' add function 'applyPagination'
				   -> 4. in ctor of class 'ProductWithTypeAndBrandSpecifications' ctor call this function [$ApplyPagination(specParams.PageSize*(specParams.PageIndex - 1), specParams.PageSize); ]
				   -> 5. in class 'SpecificationEvaluator' check if spec.isPaginationEnabled then skip & take
				   
				   
------------ [ 3.9 ]

- Create Standard pagination Response -> 1. in api layer in folder helpers add class 'Pagination' which include [pageIndex , pageSize , data , count of total products based on filtretion spec]
									  -> 2. in 'IGenericRepository' add method 'GetCountWithSpecAsync' to get count
									  -> 3. in class 'GenericRepository' impliment this method 
									  -> 4. in core layer in folder specifications add class 'ProductWithFilterationForCountSpecification' [make this class becouse if use class 'ProductWithTypeAndBrandSpecifications' will iclude & sort & take & skip .. but we only want to count]
									  -> 5. in getAll product endPoint edit return type to [$ Pagination<ProductToReturnDto>]
									  

------------ [ 3.10 ]

- want to store cart items in DB when client checkout , but before it ?? can use -> local storage , if use different browser will not find data & back end can`t access this data to use it in marketing
																				 
- Redis [ in memory DB ] => store data in RAM with expire date so best performance
						 => flexible data structure , has variety on key-Value data structure , not just string but also list , set , JSON....
						 => problem , redis not support on windows so want to use linux subSys
						 => run it using Cmd '$redis-server.exe'
						 
------------- [ 3.11 , 3.12, 3.13 ]

- when terminate redis it take snapshot from data and save it in hard desk , and when run redis it take data from hard to ram 

- to apply customer basket => 1. in core layer in folder entities add class 'basketItem' which inhirate from 'baseEntity' , and add class 'customerBasket' which have string id to use guid 
						   => 2. in core layer , in folder repos add interface 'IBasketRepository' and will not inhiriate from genericRepo 'which treat with context' but this repo will treat with redis
						   => 3. in app.json add redis connection string 
						   => 4. in core layer install package 'StackExchange.Redis' and in class program allow DI for it after DbContext and make it Singleton to use same obj while user use wabsite
						   => 5. in repo layer add class 'BasketRepository' which inhirate from 'IBasketRepository' and ask in ctor obj from class redisDB 'IConnectionMultiplexer'
						   => 6. in class 'ApplicationServicesExtensions' in method 'ApplicationServices' allow DI for BasketRepository
						   => 6. add basketController 
						   
------------------------------------------------------- [ session 04 ] ----------------------------

------------ [ 4.1 ]

- to apply identity module -> 1. in core layer install package identity
						   -> 2. in core layer in entity folder add class 'appUser' which inhirate from 'identityUser' to custmise some prop to identity user class
						   -> 3. in repo layer add folder 'identity' add class 'AppIdentityDbContext' which inhirate from 'identityDbcontext<appUser>'
						   -> 4. in appSetting add connection string  
						   -> 5. in class program allow DI for identity 
						   -> 6. add migration from layer 'repo' which include context and update database 
						   -> 7. to update db in class program by crate obj from identityDbcontext
						   
------------- [ 4.2 ]
- to apply identity seeding -> 1. in repo layer in folder identity add static class 'AppIdentityDbContextSeed' which include static function 'seedUserAsync'
							-> 2. in api layer in folder extentions add class 'IdentityServicesExtensions' which include extention method 'IdentityServices'
							-> 3. allow DI identity in function 'IdentityServices' [$services.AddIdentity<AppUser,IdentityRole>(); $services.AddAuthentication();] 
							-> 4. to update db in class program call 'seedUserAsync' function and create obj from userManeger then pass it as a parameter
							
------------ [ 4.3 & 4.4 ]

- login & register endpoints -> 1. add class 'userDto' which include [displayName, email, token] and class 'loginDto' which include [email, password] & 'registerDto'
							 -> 2. add 'AccountController' controller which include endPoints login & register [no need to check model state is valid or not becouse we configre 'invalidModelStateResponseFactory' to return obj from apiValidationErrorResponse]
				 
				 
------------ [ 4.5 ]

- JWT 'json web token' contain of -> header [alg 'hs256' | typ 'jwt']
								  -> payload 'claims' [registerd 'key, issuer, audience, duration' is static for all users | private]
								  -> signature
								  
- jwt token creation -> 1. in service layer install package 'jwt bearer' 
					 -> 2. in core layer, folder service add interface 'ITokenService'
					 -> 3. in services layer take ref from core layer and add class 'TokenService'
					 -> 4. add key to appsetting.json
					 -> 5. refactor login registresion endpoints
					 -> 6. in class program allow DI for TokenService in function 'addIdentityServices'
								$ services.AddScoped<ITokenService,TokenServices>();
								$ services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme);

------------ [ 4.7 ]
- get current user -> use prop 'User' which any controller inhirate it from controllerBase


----------- [ 4.8 ]

- to get user address -> prop : when use [$ userManeger.findByEmailAsync] will get user but by defualt nav prop 'address' not loaded
					  -> solve : extention method for userManeger to get user include address
					  -> 1. in api layer in folder extentions add class 'userManegerExtention'
					  -> 2. in api layer add 'addressDto' to prevent object cycle error
					  -> 3. in api layer in helper folder in profiles class add map for address [$ ]
					  -> 4. in account controller add endPoint 'getUserAddress'
					  
- linq query execute -> defferd
					 -> immediate execution -> casting [toList, toArray]
											-> aggregate [sum, count, avg, min, max]
											-> element [first, last, firstOrDefult, lastOrDefult]
											-> foreach
					 
------------ [ 4.11 ]

- to validate customerBasket -> 1. add class 'customerBasketDto' & 'basketItemDto' to use filters on prop 
							 -> use double.maxValue becouse defulte dt of range filter and there is no decimal.max 
							 -> create map for two dtos and inject Imapper in basketController ctor 
							 
							 
------------------------------------------------------- [ session 05 ] ----------------------------

--------- [ 5.1 ]

- rel between classes -> inhiretence [ is a rel ]
					  -> aggregate [ has a 'contain' ] -> composition [consist of] mandatory
													   -> assosioation [use] optional

	
- attributes -> like [authorize] [EnumMember(Value = "Pending")] [AllowNull]
			 -> used in reflection to add new functionality or behavior
			 -> built in .net based on decoretor design pattern which used to modify the functionality of an object at runtime

- erd attribute types -> simple | complex | composite | multivalue | drived 
	
- to apply order module -> 1. in core layer add entities 'Address | DeliveryMethod | Order | OrderItem | OrderStatus | ProductItemOrdered'
						
--------- [ 5.2 & 5.3 & 5.4 ]

- add fluentAPI to configre -> store OrderStatus in db as string then retrive it as OrderStatus [$ builder.Property(O => O.Status).HasConversion(S => S.ToString(),S => (OrderStatus) Enum.Parse(typeof(OrderStatus),S));]
							-> subtotal dt decimal (18,2) [$ builder.Property(O => O.SubTotal).HasColumnType("decimal(18, 2)")]
							-> shipping address prop mapp as columns in order table ==> 1:1 total [$ builder.OwnsOne(O => O.ShipToAddress, sh => sh.WithOwner());]
							-> 1. in repo layer > data > config > order > add class 'OrderConfiguration' & 'OrderItemConfiguration' & 'DeliveryMethodConfiguration' which inhirate from 'IentityTypeConfiguration'
							-> 2. in repo layer > storeContext add DbSets then add migration
							
- EF core all classess mapped to db or related to them must have empty parameterless ctor use it to generate obj from this entity

-------- [ 5.6 ]

- apply order service -> 1. core layer > services > add interface 'IOrderService'
					  -> 2. service layer add class 'OrderService' which inhirate from 'IOrderService'
					  
- Repo VS Services
				repo --> represent DbSet [get - add - update - delete] which change obj state
				services --> create obj it self then talk it to repo , commonly used with complex obj like order 
				
-------- [ 5.7 ]

- implement createOrderAsync -> 1. Get Basket From Baskets Repo
                                2. Get Selected Items at Basket From Products Repo
                                3. Calculate SubTotal
                                4. Get Delivery Method From DeliveryMethods Repo
                                5. Create Order
                                6. Save To Database , add methods 'addAsync & update & delete' to IGenericRepository , GenericRepository
								
- in EF core there isn`t updateAsync or deleteAsync 

-------- [ 5.8 ]

- apply unitOfWork -> 1. core layer add interface 'IUnitOfWork' which include method signature and inhirate from 'IAsyncDisposable'
				   -> 2. repo layer add class 'UnitOfWork' which implement 'IUnitOfWork'
				   -> 3. allow DI for unitOfWork in api layer > extentions folder > ApplicationServicesExtention [$services.AddScoped<IUnitOfWork, UnitOfWork>();]

- arrayList based on obj 
- list is generic version 

- create obj on the fly mean at run time