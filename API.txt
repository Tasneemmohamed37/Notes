----------------------- [session 01 ] --------------------

------------ [ 1.1 ]
- miniaml APIs -> end points without controller
- in API handel routing in each controller unLike mvc handel it once in program file
- appsetting -> include setting per invironment [dev | test | staging | production]
- restful API -> can execute endPoint only with [controller name + verb]
- middelware app.Mapcontroller() -> work like [app.useRouting "match request to endPoints" + app.useEndPoints "execute matching endPoint"]

------------ [ 1.3 ]
- graphQL -> minimize the number of requests and responses.


------------ [ 1.4 ]
- Union Arch -> 1. Domain layer [domain models - all Interfaces] 
					also name as core layer becouse it contain all project but not implemented
			 -> 2. Repository layer [repos - DbContext - fluentAPI - ]	
			 -> 3. Service layer [ payment service - cashing service - order service - auth service]
			 -> 4. Persentation layer [ controlles - DTOs ]

------------ [ 1.5 ]
- rel between product & category is 1:M but in case we make one nav prop in product only this rel will be 1:1 so must use fluentAPI
			 
------------ [ 1.6 ]
- packages -> sql   :repo layer [context] 
		   -> tools : PL [connection string]
		   

- references -> API -> repo
			 -> repo -> core
			 -> 
			 
- to apply fluentAPI using class -> class:IentityTypeConfiguration
								 -> override onModelCreating then apply configuration from assembly to apply all classes [ REFLECTION ]

------------ [ 1.7 ]
update database using obj from dbContext => 1. every time run project apply all migrations which wasn`t apply
										 => 2. use this context obj in data seeding
										 => steps -> in program class after builder.build create obj from dbcontext  by Ask Explicitly [ create scope - services - context obj - migrateAsnc]

----------- [ 1.8 ]
- data seeding -> read json files then desrialize 'convert from json' to list of this data type then add it to DB finally save changes

----------- [ 1.9 ]
- find => search local first if not found then search remote

----------- [ 1.11 ]
- by defualt nav prop not load , can load it using one of 3 approaches -> explicite [ .load ]
																	   -> eager loading [ Include ]
																	   -> lazy load [ proxies package ]


---------------------------------------------------- [ Session 02 ] --------------------------------------------

--------- [ 2.1 ]

- specification design pattern => used to build dynamic queries 
							   => من غيرة كان عندنا مشكلة وهي في الجينيرك ريبو لما كان نحتاج نعمل انكلود للنافجيشن بروبرتي كنا بنضطر نشتغل ب مسكن ونعمل اكتر من كونديشن للتايب اللي هنشتغل عليه 
							   => steps -> 1. detecte query components [ex : entry point '$ _dbContext.set<T>' / where condition / list of includes ]
										-> 2. interface include prop signiture for each query component